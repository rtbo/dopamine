name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Installation and tests

    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        bt: [ debug ]
        include:
          - os: ubuntu-latest
            dc: ldc-latest
            meson: '0.63.0'
          - os: windows-latest
            dc: dmd-latest
            meson: '0.63.0'

    runs-on: ${{ matrix.os }}

    steps:
      - name: Start PostgreSQL server Linux
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo systemctl start postgresql.service
          pg_isready
          sudo -u postgres psql --command="CREATE USER runner CREATEDB PASSWORD NULL" --command="\du"

      - name: Start PostgreSQL server Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          $pgService = Get-Service -Name postgresql*
          Set-Service -InputObject $pgService -Status running -StartupType automatic
          Start-Process -FilePath "$env:PGBIN\pg_isready" -Wait -PassThru
          & $env:PGBIN\psql --command="CREATE USER runner CREATEDB PASSWORD NULL" --command="\du"

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install D Compiler and Dub
        uses: dlang-community/setup-dlang@v1
        with:
          compiler: ${{ matrix.dc }}

      - name: Install CMake
        uses: jwlawson/actions-setup-cmake@v1.12

      - name: Add pkg-config and DLLs to Windows PATH
        if: ${{ matrix.os == 'windows-latest' }}
        run: echo $GITHUB_WORKSPACE/windows-x64/bin >> $GITHUB_PATH
        shell: bash

      - name: Enable MS Developer Command Prompt
        if: ${{ matrix.os == 'windows-latest' }}
        uses: ilammy/msvc-dev-cmd@v1.7.0

      - name: Install Dub dependencies
        run: |
          dub run dub-build-deep --yes -- vibe-d:http@0.9.4
          dub run dub-build-deep --yes -- unit-threaded:assertions@2.0.3

      - name: Build
        uses: BSFishy/meson-build@v1.0.3
        with:
          action: build
          directory: build
          setup-options: --buildtype=${{ matrix.bt }} -Denable_registry=true -Denable_test=true -Denable_client=true
          meson-version: ${{ matrix.meson }}

      - name: Run tests
        run: meson test
        working-directory: build

      - name: Print test log
        if: ${{ always() }}
        run: cat meson-logs/testlog.txt
        working-directory: build
        shell: bash
